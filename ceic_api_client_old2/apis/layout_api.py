# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://downloads.ceicdata.com/python/documentation/CEIC+Python+SDK+-+Development%20Guide.html'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/php/documentation/CEIC+PHP+SDK+-+Development+Guide.html'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/javascript/documentation/CEIC+JavaScript+SDK+-+Development+Guide.html'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.4.13
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ceic_api_client.api_client import ApiClient


class LayoutApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_layout_databases(self, **kwargs):  # noqa: E501
        """List of databases  # noqa: E501

        Returns list of layout databases. This is the top level from the layout hierarchy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_databases(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layout_databases_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_databases_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_layout_databases_with_http_info(self, **kwargs):  # noqa: E501
        """List of databases  # noqa: E501

        Returns list of layout databases. This is the top level from the layout hierarchy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_databases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'status', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_databases" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            query_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            query_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            query_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            query_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            query_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            query_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            query_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            query_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter_id', params['filter_id']))  # noqa: E501
            collection_formats['filter_id'] = 'csv'  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/layout/databases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayoutItemsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_sections(self, id, **kwargs):  # noqa: E501
        """List of Sections  # noqa: E501

        Returns list of sections for a selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_sections(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Topic ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layout_sections_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_sections_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_layout_sections_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of Sections  # noqa: E501

        Returns list of sections for a selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_sections_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Topic ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'status', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_layout_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            query_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            query_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            query_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            query_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            query_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            query_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            query_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            query_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter_id', params['filter_id']))  # noqa: E501
            collection_formats['filter_id'] = 'csv'  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/layout/topics/{id}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayoutItemsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_series(self, id, **kwargs):  # noqa: E501
        """List of Series  # noqa: E501

        Returns list of series inside of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_series(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Table ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: SeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layout_series_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_series_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_layout_series_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of Series  # noqa: E501

        Returns list of series inside of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_series_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Table ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: SeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'status', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_layout_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            query_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            query_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            query_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            query_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            query_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            query_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            query_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            query_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter_id', params['filter_id']))  # noqa: E501
            collection_formats['filter_id'] = 'csv'  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/layout/tables/{id}/series', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_tables(self, id, **kwargs):  # noqa: E501
        """List of Tables  # noqa: E501

        Returns list of tables for a selected section  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_tables(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Section ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layout_tables_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_tables_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_layout_tables_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of Tables  # noqa: E501

        Returns list of tables for a selected section  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_tables_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Section ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'status', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_tables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_layout_tables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            query_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            query_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            query_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            query_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            query_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            query_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            query_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            query_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter_id', params['filter_id']))  # noqa: E501
            collection_formats['filter_id'] = 'csv'  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/layout/sections/{id}/tables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayoutItemsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_topics(self, id, **kwargs):  # noqa: E501
        """List of Topics  # noqa: E501

        Returns list of topics for a selected database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_topics(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Database ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layout_topics_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_topics_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_layout_topics_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of Topics  # noqa: E501

        Returns list of topics for a selected database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layout_topics_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Database ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param list[str] frequency: Frequency filter. One or more comma separated frequency code values. D - Daily W - Weekly M - Monthly Q - Quarterly S - Semi-annual Y - Annual
        :param list[str] country: Country filter. One or more comma separated country code values. See related Dictionary function to get the full list of accepted countries.
        :param list[str] source: Source filter. One or more comma separated source code values. See related Dictionary function to get the full list of accepted sources.
        :param list[str] unit: Unit filter. One or more comma separated unit code values. See related Dictionary function to get the full list of accepted units.
        :param list[str] indicator: Indicator filter. One or more comma separated indicator code values. See related Dictionary function to get full list of accepted indicators.
        :param list[str] region: Region filter. One or more comma separated region code values. See related Dictionary function to get the full list of accepted regions.
        :param bool subscribed_only: Show only results for subscribed series when set to `true`. By default show results for all the series found.
        :param bool key_only: Show only 'key' series when set to `true`.
        :param bool new_only: Show only series created less than 1 month ago when set to `true`.
        :param bool name_only: This filter related with the `keyword` filter. If it's `true` keyword search will be searched only in series name instead of all series attributes.
        :param date start_date_before: Will return series with first observation before `start_date_before`
        :param date end_date_after: Will return series with last observation after `end_date_after`
        :param date created_after: Will return series created after `created_after` date
        :param date updated_after: Will return series last time updated after `updated_after` date
        :param list[str] status: Status filter. One or more comma separated status code values. When not explicitly set, defaults to T.  T - Active C - Discontinued B - Rebased
        :param list[str] filter_id: Filter ID used to define a subset of data over which the search will be executed. When combined with additional search criterion, the result will be an intesection of both.
        :return: LayoutItemsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'keyword', 'frequency', 'country', 'source', 'unit', 'indicator', 'region', 'subscribed_only', 'key_only', 'new_only', 'name_only', 'start_date_before', 'end_date_after', 'created_after', 'updated_after', 'status', 'filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_layout_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'frequency' in params:
            query_params.append(('frequency', params['frequency']))  # noqa: E501
            collection_formats['frequency'] = 'csv'  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
            collection_formats['country'] = 'csv'  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501
        if 'unit' in params:
            query_params.append(('unit', params['unit']))  # noqa: E501
            collection_formats['unit'] = 'csv'  # noqa: E501
        if 'indicator' in params:
            query_params.append(('indicator', params['indicator']))  # noqa: E501
            collection_formats['indicator'] = 'csv'  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
            collection_formats['region'] = 'csv'  # noqa: E501
        if 'subscribed_only' in params:
            query_params.append(('subscribed_only', params['subscribed_only']))  # noqa: E501
        if 'key_only' in params:
            query_params.append(('key_only', params['key_only']))  # noqa: E501
        if 'new_only' in params:
            query_params.append(('new_only', params['new_only']))  # noqa: E501
        if 'name_only' in params:
            query_params.append(('name_only', params['name_only']))  # noqa: E501
        if 'start_date_before' in params:
            query_params.append(('start_date_before', params['start_date_before']))  # noqa: E501
        if 'end_date_after' in params:
            query_params.append(('end_date_after', params['end_date_after']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter_id', params['filter_id']))  # noqa: E501
            collection_formats['filter_id'] = 'csv'  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/layout/databases/{id}/topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayoutItemsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
