# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://downloads.ceicdata.com/python/documentation/CEIC+Python+SDK+-+Development%20Guide.html'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/php/documentation/CEIC+PHP+SDK+-+Development+Guide.html'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/javascript/documentation/CEIC+JavaScript+SDK+-+Development+Guide.html'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.4.13
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ceic_api_client.api_client import ApiClient


class DumpsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_data_dump(self, filter_id, **kwargs):  # noqa: E501
        """Create dump  # noqa: E501

        Create data dump  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_dump(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_id: Filter ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str consolidation: Consolidation Method
        :param str delivery: Delivery Method
        :param str user_ftp_url: Result delivery URL for local FTP server. Only valid when the localftp delivery method is selected.
        :param str user_ftp_path: Result delivery path for local FTP server. Only valid when the localftp delivery method is selected.
        :param str user_ftp_username: Username for the local FTP server. Only valid when the localftp delivery method is selected.
        :param str user_ftp_password: Password for the local FTP server. Only valid when the localftp delivery method is selected and if local_ftp_username is specified.
        :param str notification_email: When set, the user will receive notifications by the e-mail address specified. Multiple comma separated e-mail addresses could be set.
        :param str notification_url: URL for push notification upon dump completion.
        :param str notification_http_method: HTTP Method for push notifications.
        :return: DumpResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_data_dump_with_http_info(filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_data_dump_with_http_info(filter_id, **kwargs)  # noqa: E501
            return data

    def create_data_dump_with_http_info(self, filter_id, **kwargs):  # noqa: E501
        """Create dump  # noqa: E501

        Create data dump  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_data_dump_with_http_info(filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_id: Filter ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str consolidation: Consolidation Method
        :param str delivery: Delivery Method
        :param str user_ftp_url: Result delivery URL for local FTP server. Only valid when the localftp delivery method is selected.
        :param str user_ftp_path: Result delivery path for local FTP server. Only valid when the localftp delivery method is selected.
        :param str user_ftp_username: Username for the local FTP server. Only valid when the localftp delivery method is selected.
        :param str user_ftp_password: Password for the local FTP server. Only valid when the localftp delivery method is selected and if local_ftp_username is specified.
        :param str notification_email: When set, the user will receive notifications by the e-mail address specified. Multiple comma separated e-mail addresses could be set.
        :param str notification_url: URL for push notification upon dump completion.
        :param str notification_http_method: HTTP Method for push notifications.
        :return: DumpResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'consolidation', 'delivery', 'user_ftp_url', 'user_ftp_path', 'user_ftp_username', 'user_ftp_password', 'notification_email', 'notification_url', 'notification_http_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_data_dump" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_id' is set
        if ('filter_id' not in params or
                params['filter_id'] is None):
            raise ValueError("Missing the required parameter `filter_id` when calling `create_data_dump`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'filter_id' in params:
            form_params.append(('filter_id', params['filter_id']))  # noqa: E501
        if 'consolidation' in params:
            form_params.append(('consolidation', params['consolidation']))  # noqa: E501
        if 'delivery' in params:
            form_params.append(('delivery', params['delivery']))  # noqa: E501
        if 'user_ftp_url' in params:
            form_params.append(('user_ftp_url', params['user_ftp_url']))  # noqa: E501
        if 'user_ftp_path' in params:
            form_params.append(('user_ftp_path', params['user_ftp_path']))  # noqa: E501
        if 'user_ftp_username' in params:
            form_params.append(('user_ftp_username', params['user_ftp_username']))  # noqa: E501
        if 'user_ftp_password' in params:
            form_params.append(('user_ftp_password', params['user_ftp_password']))  # noqa: E501
        if 'notification_email' in params:
            form_params.append(('notification_email', params['notification_email']))  # noqa: E501
        if 'notification_url' in params:
            form_params.append(('notification_url', params['notification_url']))  # noqa: E501
        if 'notification_http_method' in params:
            form_params.append(('notification_http_method', params['notification_http_method']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dumps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DumpResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_dump(self, id, **kwargs):  # noqa: E501
        """Get dump  # noqa: E501

        Get generated dump or information about process of generation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_dump(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Dump ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: DumpResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_dump_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_dump_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_data_dump_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get dump  # noqa: E501

        Get generated dump or information about process of generation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_dump_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Dump ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: DumpResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_dump" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_data_dump`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dumps/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DumpResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
