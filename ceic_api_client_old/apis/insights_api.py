# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://downloads.ceicdata.com/python/documentation/CEIC+Python+SDK+-+Development%20Guide.html'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/php/documentation/CEIC+PHP+SDK+-+Development+Guide.html'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/javascript/documentation/CEIC+JavaScript+SDK+-+Development+Guide.html'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.4.13
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ceic_api_client.api_client import ApiClient


class InsightsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_insight(self, id, file_format, **kwargs):  # noqa: E501
        """Request a downloadable insight report  # noqa: E501

        Returns one or more links to the insight report. When the report generation takes too much time to complete in a timely manner, returns HTTP 408. In this case the request have to be repeated after a minute. Once the report is generated, consecutive requests are returned immediately. Each successful response returns one or more download links that expires in 5 minutes. The client application consuming the API shall download the file within this period or send additional request to the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_insight(id, file_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str file_format: Insight report file format (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool ignore_cache: New file will be generated
        :param str adjust_columns: No adjust or wrap text in XLSX cell
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param str blank_observations: If set to true, will return empty time-points which oterwise are omitted.
        :param str orientation: Columns/rows orientation
        :param str order: Sort order - Asc/Desc
        :param float decimal_places: Decimal places for the time-points values
        :param str date_format: Time-points date format
        :return: InsightDownloadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_insight_with_http_info(id, file_format, **kwargs)  # noqa: E501
        else:
            (data) = self.download_insight_with_http_info(id, file_format, **kwargs)  # noqa: E501
            return data

    def download_insight_with_http_info(self, id, file_format, **kwargs):  # noqa: E501
        """Request a downloadable insight report  # noqa: E501

        Returns one or more links to the insight report. When the report generation takes too much time to complete in a timely manner, returns HTTP 408. In this case the request have to be repeated after a minute. Once the report is generated, consecutive requests are returned immediately. Each successful response returns one or more download links that expires in 5 minutes. The client application consuming the API shall download the file within this period or send additional request to the API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_insight_with_http_info(id, file_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str file_format: Insight report file format (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool ignore_cache: New file will be generated
        :param str adjust_columns: No adjust or wrap text in XLSX cell
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param str blank_observations: If set to true, will return empty time-points which oterwise are omitted.
        :param str orientation: Columns/rows orientation
        :param str order: Sort order - Asc/Desc
        :param float decimal_places: Decimal places for the time-points values
        :param str date_format: Time-points date format
        :return: InsightDownloadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file_format', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'ignore_cache', 'adjust_columns', 'start_date', 'end_date', 'count', 'blank_observations', 'orientation', 'order', 'decimal_places', 'date_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `download_insight`")  # noqa: E501
        # verify the required parameter 'file_format' is set
        if ('file_format' not in params or
                params['file_format'] is None):
            raise ValueError("Missing the required parameter `file_format` when calling `download_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'file_format' in params:
            path_params['file_format'] = params['file_format']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'ignore_cache' in params:
            query_params.append(('ignore_cache', params['ignore_cache']))  # noqa: E501
        if 'adjust_columns' in params:
            query_params.append(('adjust_columns', params['adjust_columns']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'blank_observations' in params:
            query_params.append(('blank_observations', params['blank_observations']))  # noqa: E501
        if 'orientation' in params:
            query_params.append(('orientation', params['orientation']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'decimal_places' in params:
            query_params.append(('decimal_places', params['decimal_places']))  # noqa: E501
        if 'date_format' in params:
            query_params.append(('date_format', params['date_format']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/{id}/download/{file_format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightDownloadResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gallery_insights_categories(self, **kwargs):  # noqa: E501
        """Insight gallery categories  # noqa: E501

        Returns list of gallery categories. To be used with group filters \"analytics\" and \"gallery\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gallery_insights_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsCategoriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gallery_insights_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_gallery_insights_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_gallery_insights_categories_with_http_info(self, **kwargs):  # noqa: E501
        """Insight gallery categories  # noqa: E501

        Returns list of gallery categories. To be used with group filters \"analytics\" and \"gallery\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gallery_insights_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsCategoriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gallery_insights_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/categories/gallery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsCategoriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight(self, id, **kwargs):  # noqa: E501
        """Insights details  # noqa: E501

        Returns information about a specified insight.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_insight_with_http_info(self, id, **kwargs):  # noqa: E501
        """Insights details  # noqa: E501

        Returns information about a specified insight.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight_series(self, id, **kwargs):  # noqa: E501
        """List of all series for a particular insight  # noqa: E501

        Returns all series from the specified insight(s), including all time-points and metadata, as well as their layout in the insight context in terms of grouping and separators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :param float limit: Number of records to return in the range 1 - 100. Default is 100.
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_series_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_series_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_insight_series_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of all series for a particular insight  # noqa: E501

        Returns all series from the specified insight(s), including all time-points and metadata, as well as their layout in the insight context in terms of grouping and separators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :param float limit: Number of records to return in the range 1 - 100. Default is 100.
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'count', 'start_date', 'end_date', 'updated_after', 'blank_observations', 'time_points_status', 'with_replacements_metadata', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_insight_series`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_insight_series`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_insight_series`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'blank_observations' in params:
            query_params.append(('blank_observations', params['blank_observations']))  # noqa: E501
        if 'time_points_status' in params:
            query_params.append(('time_points_status', params['time_points_status']))  # noqa: E501
        if 'with_replacements_metadata' in params:
            query_params.append(('with_replacements_metadata', params['with_replacements_metadata']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/{id}/series', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightSeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight_series_data(self, id, **kwargs):  # noqa: E501
        """List of all series time-points for a particular insight  # noqa: E501

        Returns all series time-points from the specified insight series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_data(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :param float limit: Number of records to return in the range 1 - 100. Default is 100.
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_series_data_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_series_data_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_insight_series_data_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of all series time-points for a particular insight  # noqa: E501

        Returns all series time-points from the specified insight series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_data_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :param float limit: Number of records to return in the range 1 - 100. Default is 100.
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'count', 'start_date', 'end_date', 'updated_after', 'blank_observations', 'time_points_status', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_series_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_insight_series_data`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_insight_series_data`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_insight_series_data`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'blank_observations' in params:
            query_params.append(('blank_observations', params['blank_observations']))  # noqa: E501
        if 'time_points_status' in params:
            query_params.append(('time_points_status', params['time_points_status']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/{id}/series/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightSeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight_series_list(self, series_id, **kwargs):  # noqa: E501
        """List of series based on their insight series ID  # noqa: E501

        Returns full series data, based on their insight ID. It can include any formulas or transformations applied to the data, or changes to the metadata (ex. title) as part of the insight context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_list(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str series_id: Insight Series ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_series_list_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_series_list_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def get_insight_series_list_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """List of series based on their insight series ID  # noqa: E501

        Returns full series data, based on their insight ID. It can include any formulas or transformations applied to the data, or changes to the metadata (ex. title) as part of the insight context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_list_with_http_info(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str series_id: Insight Series ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'count', 'start_date', 'end_date', 'updated_after', 'blank_observations', 'time_points_status', 'with_replacements_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_series_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if ('series_id' not in params or
                params['series_id'] is None):
            raise ValueError("Missing the required parameter `series_id` when calling `get_insight_series_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['series_id'] = params['series_id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'blank_observations' in params:
            query_params.append(('blank_observations', params['blank_observations']))  # noqa: E501
        if 'time_points_status' in params:
            query_params.append(('time_points_status', params['time_points_status']))  # noqa: E501
        if 'with_replacements_metadata' in params:
            query_params.append(('with_replacements_metadata', params['with_replacements_metadata']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/series/{series_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightSeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight_series_list_data(self, series_id, **kwargs):  # noqa: E501
        """List of series time-points based on their insight series ID  # noqa: E501

        Returns series time-points data, based on their insight ID. It can include any formulas or transformations applied to the data as part of the insight context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_list_data(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str series_id: Insight Series ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_series_list_data_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_series_list_data_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def get_insight_series_list_data_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """List of series time-points based on their insight series ID  # noqa: E501

        Returns series time-points data, based on their insight ID. It can include any formulas or transformations applied to the data as part of the insight context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_list_data_with_http_info(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str series_id: Insight Series ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param int count: Limit the amount of latest time-points returned, by the number specified.
        :param date start_date: Limits the start date after which the time-points will be returned.
        :param date end_date: Limits the end date before which the time-points will be returned.
        :param datetime updated_after: Returns only the updated time-points after the date specified.
        :param bool blank_observations: If it's set to true, empty time-points will be returned
        :param str time_points_status: Time points filter. One or more comma separated status code values. When not explicitly set, defaults to T. T - Active X - Deleted
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'count', 'start_date', 'end_date', 'updated_after', 'blank_observations', 'time_points_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_series_list_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if ('series_id' not in params or
                params['series_id'] is None):
            raise ValueError("Missing the required parameter `series_id` when calling `get_insight_series_list_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['series_id'] = params['series_id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'updated_after' in params:
            query_params.append(('updated_after', params['updated_after']))  # noqa: E501
        if 'blank_observations' in params:
            query_params.append(('blank_observations', params['blank_observations']))  # noqa: E501
        if 'time_points_status' in params:
            query_params.append(('time_points_status', params['time_points_status']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/series/{series_id}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightSeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight_series_list_metadata(self, series_id, **kwargs):  # noqa: E501
        """List of series metadata based on their insight series ID  # noqa: E501

        Returns series metadata, based on their insight ID. It can include changes to the metadata (ex. title) as part of the insight context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_list_metadata(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str series_id: Insight Series ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_series_list_metadata_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_series_list_metadata_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def get_insight_series_list_metadata_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """List of series metadata based on their insight series ID  # noqa: E501

        Returns series metadata, based on their insight ID. It can include changes to the metadata (ex. title) as part of the insight context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_list_metadata_with_http_info(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str series_id: Insight Series ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'with_replacements_metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_series_list_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if ('series_id' not in params or
                params['series_id'] is None):
            raise ValueError("Missing the required parameter `series_id` when calling `get_insight_series_list_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['series_id'] = params['series_id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'with_replacements_metadata' in params:
            query_params.append(('with_replacements_metadata', params['with_replacements_metadata']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/series/{series_id}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightSeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight_series_metadata(self, id, **kwargs):  # noqa: E501
        """List of all series metadata for a particular insight  # noqa: E501

        Returns all series metadata from the specified insight(s), as well as their layout in the insight context in terms of grouping and separators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_metadata(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :param float limit: Number of records to return in the range 1 - 100. Default is 100.
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_series_metadata_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_series_metadata_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_insight_series_metadata_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of all series metadata for a particular insight  # noqa: E501

        Returns all series metadata from the specified insight(s), as well as their layout in the insight context in terms of grouping and separators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_series_metadata_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Insight ID (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param bool with_replacements_metadata: If it is `true` result will contain replacements metadata not only list of id`s
        :param float limit: Number of records to return in the range 1 - 100. Default is 100.
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :return: InsightSeriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'with_replacements_metadata', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight_series_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_insight_series_metadata`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_insight_series_metadata`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_insight_series_metadata`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'with_replacements_metadata' in params:
            query_params.append(('with_replacements_metadata', params['with_replacements_metadata']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/{id}/series/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightSeriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insights(self, **kwargs):  # noqa: E501
        """List of User Created Insights  # noqa: E501

        Returns full list of CDMNext user created insights  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insights_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_insights_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_insights_with_http_info(self, **kwargs):  # noqa: E501
        """List of User Created Insights  # noqa: E501

        Returns full list of CDMNext user created insights  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insights" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insights_categories(self, **kwargs):  # noqa: E501
        """Insight categories  # noqa: E501

        Returns list of insight categories. To be used wtih group filters \"favorite\", \"my\", \"shared\", \"recent\", all\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsCategoriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insights_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_insights_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_insights_categories_with_http_info(self, **kwargs):  # noqa: E501
        """Insight categories  # noqa: E501

        Returns list of insight categories. To be used wtih group filters \"favorite\", \"my\", \"shared\", \"recent\", all\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: InsightsCategoriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insights_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsCategoriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_insights(self, **kwargs):  # noqa: E501
        """Insights search  # noqa: E501

        Search for insights. Those could be user created, shared, or CEIC created ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_insights(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str group: Insights group. Default is `my`.
        :param float limit: Number of records to return
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param str order: Sort order
        :param str direction: Sort order direction
        :param list[str] tags: List of insight tags to search by tag
        :param list[str] categories: List of insights categories to search by category
        :return: InsightsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_insights_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_insights_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_insights_with_http_info(self, **kwargs):  # noqa: E501
        """Insights search  # noqa: E501

        Search for insights. Those could be user created, shared, or CEIC created ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_insights_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :param str group: Insights group. Default is `my`.
        :param float limit: Number of records to return
        :param float offset: The offset from which the records will be returned. Used to get the next set of records when the limit is reached.
        :param str keyword: Search term. One or more keywords. May contain special words further controlling the search results. Keyword search tips: `Retail Sales` - Show series with both keywords while the sequence of keywords is irrelevant. Equivalent to search Sales Retail `Retail AND Sales` - Show results: series with terms of Retail AND Sales, regardless of the sequence. E. g. Retail Sales, Automobile Sales Retail `Retail;Sales` - Show series with either keyword and series with both keywords while the sequence of keywords is irrelevant, equivalent to search: Sales;Retail `Retail OR Sales` - Show results: series with terms of Retail OR Sales, regardless of the sequence. E. g. Retail Sales, Retail Trade, Sales Price, Motor Vehicle Sales `Retail NOT Sales` - Narrow a search by excluding specific terms while the sequence of keywords is relevant. Show results: series with terms that include Retail, but NOT Sales. E. g. Retail Trade, Retail Price, Retail Bank `Retail Sales NOT (Hong Kong)` - Narrow a search by excluding a set of words in parentheses while the sequence of keywords in parentheses is irrelevant, equivalent to search: Retail Sales NOT (Hong Kong). Show results: series with terms that include Retail Sales, but NOT Hong Kong, such as Retail Sales YoY: China, Retail Sales YoY: United States
        :param str order: Sort order
        :param str direction: Sort order direction
        :param list[str] tags: List of insight tags to search by tag
        :param list[str] categories: List of insights categories to search by category
        :return: InsightsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information', 'group', 'limit', 'offset', 'keyword', 'order', 'direction', 'tags', 'categories']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_insights" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
            collection_formats['tags'] = 'csv'  # noqa: E501
        if 'categories' in params:
            query_params.append(('categories', params['categories']))  # noqa: E501
            collection_formats['categories'] = 'csv'  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/insights/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsightsSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
