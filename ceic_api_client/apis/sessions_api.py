# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://downloads.ceicdata.com/python/documentation/CEIC+Python+SDK+-+Development%20Guide.html'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/php/documentation/CEIC+PHP+SDK+-+Development+Guide.html'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/javascript/documentation/CEIC+JavaScript+SDK+-+Development+Guide.html'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.4.12
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ceic_api_client.api_client import ApiClient


class SessionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def generate_impersonate_token(self, employee_token, user_id, application, **kwargs):  # noqa: E501
        """Generate impersonate token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_impersonate_token(employee_token, user_id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str employee_token: Impersonate API token generated on CAS service (required)
        :param str user_id: User Id (required)
        :param str application: Application ID (required)
        :param float expire_after: Token will be expired after `expire_after` in seconds
        :return: ImpersonateAPIKeyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_impersonate_token_with_http_info(employee_token, user_id, application, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_impersonate_token_with_http_info(employee_token, user_id, application, **kwargs)  # noqa: E501
            return data

    def generate_impersonate_token_with_http_info(self, employee_token, user_id, application, **kwargs):  # noqa: E501
        """Generate impersonate token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_impersonate_token_with_http_info(employee_token, user_id, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str employee_token: Impersonate API token generated on CAS service (required)
        :param str user_id: User Id (required)
        :param str application: Application ID (required)
        :param float expire_after: Token will be expired after `expire_after` in seconds
        :return: ImpersonateAPIKeyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['employee_token', 'user_id', 'application', 'expire_after']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_impersonate_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'employee_token' is set
        if ('employee_token' not in params or
                params['employee_token'] is None):
            raise ValueError("Missing the required parameter `employee_token` when calling `generate_impersonate_token`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `generate_impersonate_token`")  # noqa: E501
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `generate_impersonate_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'employee_token' in params:
            form_params.append(('employee_token', params['employee_token']))  # noqa: E501
        if 'user_id' in params:
            form_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'application' in params:
            form_params.append(('application', params['application']))  # noqa: E501
        if 'expire_after' in params:
            form_params.append(('expire_after', params['expire_after']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/impersonate/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpersonateAPIKeyResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login(self, login, password, application, **kwargs):  # noqa: E501
        """Authenticates the user, creating a new session.  # noqa: E501

        Used by certain applications only. Instead of using sessions, use an API key passing it as a `token` query parameter or `Authorization` header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login(login, password, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: Username (required)
        :param str password: Password (required)
        :param str application: Application ID (required)
        :param str application_version: Application Version
        :return: UserSessionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_with_http_info(login, password, application, **kwargs)  # noqa: E501
        else:
            (data) = self.login_with_http_info(login, password, application, **kwargs)  # noqa: E501
            return data

    def login_with_http_info(self, login, password, application, **kwargs):  # noqa: E501
        """Authenticates the user, creating a new session.  # noqa: E501

        Used by certain applications only. Instead of using sessions, use an API key passing it as a `token` query parameter or `Authorization` header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_with_http_info(login, password, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: Username (required)
        :param str password: Password (required)
        :param str application: Application ID (required)
        :param str application_version: Application Version
        :return: UserSessionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'password', 'application', 'application_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `login`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `login`")  # noqa: E501
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'application' in params:
            query_params.append(('application', params['application']))  # noqa: E501
        if 'application_version' in params:
            query_params.append(('application_version', params['application_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSessionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logout(self, session, **kwargs):  # noqa: E501
        """Close existing API session.  # noqa: E501

        Not needed when API key is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout(session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session: User session (required)
        :return: SessionStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logout_with_http_info(session, **kwargs)  # noqa: E501
        else:
            (data) = self.logout_with_http_info(session, **kwargs)  # noqa: E501
            return data

    def logout_with_http_info(self, session, **kwargs):  # noqa: E501
        """Close existing API session.  # noqa: E501

        Not needed when API key is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_with_http_info(session, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session: User session (required)
        :return: SessionStatusResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session' is set
        if ('session' not in params or
                params['session'] is None):
            raise ValueError("Missing the required parameter `session` when calling `logout`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session' in params:
            path_params['session'] = params['session']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/logout/{session}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SessionStatusResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
