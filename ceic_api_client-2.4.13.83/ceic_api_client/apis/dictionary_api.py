# coding: utf-8

"""
    CEIC API

    CEIC API v2 is a new generation RESTful API that provides an easy access to CEIC's analytical and time series information, including all metadata items and time point values. It includes powerful keyword and criteria search, as well as a data feed option – retrieving only the newest time points data, in order to feed user’s own database and compare the actual changes introduced. Supported output formats include XML, JSON and CSV.  API access is secured utilizing API keys and all data transfer encrypted via HTTPS. In order to use any of the API functions, users shall generate such a key. This can be done through user's profile menu under CDMNext. Users can have only one active API key. Generating a new key will invalidate the existing one. API keys have to be included with each HTTP request, either as an `Authorization` header or as `token` query parameter.  All dates for both input parameters and output attributes are in ISO 8601 format (YYYYMMDD or YYYY-MM-DD) in order to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.  <p style=\"color: red\">Security Notice: As of June 30, 2018 the CEIC API v2 will not be accessible by clients using SSL or TLS 1.0 security protocol</p>  <ul>         <li>             <a href='https://downloads.ceicdata.com/python/documentation/CEIC+Python+SDK+-+Development%20Guide.html'>CEIC Python SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/php/documentation/CEIC+PHP+SDK+-+Development+Guide.html'>CEIC PHP SDK - Development Guide</a>         </li>         <li>             <a href='https://downloads.ceicdata.com/javascript/documentation/CEIC+JavaScript+SDK+-+Development+Guide.html'>CEIC JavaScript SDK - Development Guide</a>         </li>     <li>   <a href='https://downloads.ceicdata.com/api/documentation/api-release-notes.html'>Release Notes</a>   <span>             <a href=\"https://downloads.ceicdata.com/api/documentation/api-release-notes-rss.xml\">                 <img src=\"https://downloads.ceicdata.com/api/documentation/release-notes-files/rss-logo-rectangle-35x75.png\">             </a>         </span>     </li>  </ul>  <div>     <a href='https://api-status.ceicdata.com/'>Monitor CEIC API Status</a> </div>  # noqa: E501

    OpenAPI spec version: 2.4.13
    Contact: helpdesk@ceicdata.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ceic_api_client.api_client import ApiClient


class DictionaryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_classification_indicators(self, id, **kwargs):  # noqa: E501
        """List of indicators for specific classification  # noqa: E501

        Returns full list of indicators for specific classification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classification_indicators(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Classification ID. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: IndicatorsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classification_indicators_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classification_indicators_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_classification_indicators_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of indicators for specific classification  # noqa: E501

        Returns full list of indicators for specific classification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classification_indicators_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Classification ID. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: IndicatorsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classification_indicators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_classification_indicators`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/classifications/{id}/indicators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classifications(self, **kwargs):  # noqa: E501
        """Classifications list  # noqa: E501

        Returns full list of supported top level classifications and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classifications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: ClassificationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classifications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_classifications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_classifications_with_http_info(self, **kwargs):  # noqa: E501
        """Classifications list  # noqa: E501

        Returns full list of supported top level classifications and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classifications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: ClassificationsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classifications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/classifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassificationsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_countries(self, **kwargs):  # noqa: E501
        """Countries list  # noqa: E501

        Returns full list of supported countries and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: CountriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_countries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_countries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_countries_with_http_info(self, **kwargs):  # noqa: E501
        """Countries list  # noqa: E501

        Returns full list of supported countries and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: CountriesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_countries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountriesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_country_sources(self, id, **kwargs):  # noqa: E501
        """List of sources for a specific country  # noqa: E501

        Returns full list of sources for a specific country.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_country_sources(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Country ID. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: SourcesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_country_sources_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_country_sources_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_country_sources_with_http_info(self, id, **kwargs):  # noqa: E501
        """List of sources for a specific country  # noqa: E501

        Returns full list of sources for a specific country.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_country_sources_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Country ID. (required)
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: SourcesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_country_sources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_country_sources`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/countries/{id}/sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourcesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dictionaries(self, **kwargs):  # noqa: E501
        """Full dictionary list  # noqa: E501

        Returns all the available dictionaries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dictionaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: DictionaryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dictionaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dictionaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dictionaries_with_http_info(self, **kwargs):  # noqa: E501
        """Full dictionary list  # noqa: E501

        Returns all the available dictionaries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dictionaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: DictionaryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dictionaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DictionaryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_frequencies(self, **kwargs):  # noqa: E501
        """Frequencies list  # noqa: E501

        Returns full list of supported frequencies and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frequencies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: FrequenciesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_frequencies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_frequencies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_frequencies_with_http_info(self, **kwargs):  # noqa: E501
        """Frequencies list  # noqa: E501

        Returns full list of supported frequencies and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frequencies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: FrequenciesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_frequencies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/frequencies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FrequenciesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicators(self, **kwargs):  # noqa: E501
        """Indicators list  # noqa: E501

        Returns full list of supported indicators, their codes and the related top level classifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicators(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: IndicatorsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicators_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_indicators_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_indicators_with_http_info(self, **kwargs):  # noqa: E501
        """Indicators list  # noqa: E501

        Returns full list of supported indicators, their codes and the related top level classifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicators_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: IndicatorsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicators" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/indicators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layouts(self, **kwargs):  # noqa: E501
        """DEPRECATED. Please use &#x60;/layout/databases&#x60;. Database layouts list  # noqa: E501

        DEPRECATED. Please use `/layout/databases`. Returns full list of supported databases and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layouts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: LayoutsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_layouts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_layouts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_layouts_with_http_info(self, **kwargs):  # noqa: E501
        """DEPRECATED. Please use &#x60;/layout/databases&#x60;. Database layouts list  # noqa: E501

        DEPRECATED. Please use `/layout/databases`. Returns full list of supported databases and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_layouts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: LayoutsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layouts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/layouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayoutsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_regions(self, **kwargs):  # noqa: E501
        """Regions list  # noqa: E501

        Returns full list of supported regions and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: RegionsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_regions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_regions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_regions_with_http_info(self, **kwargs):  # noqa: E501
        """Regions list  # noqa: E501

        Returns full list of supported regions and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: RegionsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_regions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegionsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sources(self, **kwargs):  # noqa: E501
        """Sources list  # noqa: E501

        Returns full list of supported sources and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: SourcesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sources_with_http_info(self, **kwargs):  # noqa: E501
        """Sources list  # noqa: E501

        Returns full list of supported sources and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: SourcesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SourcesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_statuses(self, **kwargs):  # noqa: E501
        """Statuses list  # noqa: E501

        Returns full list of supported statuses and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statuses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: StatusesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_statuses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_statuses_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_statuses_with_http_info(self, **kwargs):  # noqa: E501
        """Statuses list  # noqa: E501

        Returns full list of supported statuses and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_statuses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: StatusesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_statuses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_units(self, **kwargs):  # noqa: E501
        """Units list  # noqa: E501

        Returns full list of supported units and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_units(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: UnitsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_units_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_units_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_units_with_http_info(self, **kwargs):  # noqa: E501
        """Units list  # noqa: E501

        Returns full list of supported units and their codes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_units_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: Preferred language code in which data shall be returned. Defaults to `English` if no translation in the specified language is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str accept: Response data format. Default is `application/json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str authorization: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param str lang: Preferred language code in which data will be returned. Defaults to `English` if no translation in the language specified is available. Can be used through the query parameter `query` or using the header `Accept-Language`.  `en` - English `zh` - Chinese `ru` - Russian `id` - Indonesian `jp` - Japanese
        :param str format: Response data format. Default is `json`. Can be used through the query parameter `format` or using the header `Accept`.
        :param str token: Access API key. Can be used through the query parameter `token` or using the header `Authorization`.
        :param bool with_model_information: If set to `true` returns the model names as part of the response.
        :return: UnitsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'accept', 'authorization', 'lang', 'format', 'token', 'with_model_information']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'with_model_information' in params:
            query_params.append(('with_model_information', params['with_model_information']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AuthorizationParam']  # noqa: E501

        return self.api_client.call_api(
            '/dictionary/units', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnitsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
